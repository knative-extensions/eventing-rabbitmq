name: KinD conformance tests

on:
  push:
    branches: [ 'main', 'release-*' ]
  pull_request:
    branches: [ 'main', 'release-*' ]

  workflow_dispatch:      # Manual trigger.
    inputs:
      milestoneEventsTarget:
        description: 'Target Milestone Events to URL'

jobs:

  ko-resolve:
    name: conformance tests for stand alone broker
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Keep running if one leg fails.
      matrix:
        k8s-version:
        - v1.20.7
        - v1.21.2
        - v1.22.1

        rabbitmq-operator-version:
        - v1.10.0

        # Map between K8s and KinD versions.
        # This is attempting to make it a bit clearer what's being tested.
        # See: https://github.com/kubernetes-sigs/kind/releases/tag/v0.9.0
        include:
        - k8s-version: v1.20.7
          kind-version: v0.11.1
          kind-image-sha: sha256:cbeaf907fc78ac97ce7b625e4bf0de16e3ea725daf6b04f930bd14c67c671ff9
        - k8s-version: v1.21.2
          kind-version: v0.11.1
          kind-image-sha: sha256:0fda882e43d425622f045b492f8bd83c2e0b4984fc03e2e05ec101ca1a685fb7
        - k8s-version: v1.22.1
          kind-version: v0.11.1
          kind-image-sha: sha256:e0bf222d7dd1589075117c51740903017b328c59ffb0c3d97187a2b3de1f92b3
    env:
      GOPATH: ${{ github.workspace }}
      KO_DOCKER_REPO: kind.local
      SYSTEM_NAMESPACE: knative-eventing
      # Where the Rabbitmq cluster operator is installed
      RABBITMQ_SYSTEM_NAMESPACE: rabbitmq-system
      KIND_CLUSTER_NAME: kind

    steps:
    - name: Defaults
      run: |
        if [[ "${{ secrets.SLACK_WEBHOOK }}" != "" ]]; then
          echo "SLACK_WEBHOOK=exists" >> $GITHUB_ENV
        fi
        if [[ "${{ github.event.inputs.milestoneEventsTarget }}" != "" ]]; then
          echo "MILESTONE_EVENTS_TARGET=${{ github.event.inputs.milestoneEventsTarget }}" >> $GITHUB_ENV
        fi

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17.x

    - name: Install Dependencies
      run: |
        curl -L https://github.com/google/ko/releases/download/v0.9.1/ko_0.9.1_Linux_x86_64.tar.gz | tar xzf - ko
        sudo mv ko /usr/local/bin

    - name: Check out code onto GOPATH
      uses: actions/checkout@v2
      with:
        path: ./src/knative.dev/${{ github.event.repository.name }}

    - name: Install KinD
      working-directory: ./src/knative.dev/${{ github.event.repository.name }}
      env:
        KIND_VERSION: ${{ matrix.kind-version }}
      run: |
        set -x

        curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${{ matrix.kind-version }}/kind-$(uname)-amd64
        chmod +x ./kind
        sudo mv kind /usr/local/bin

    - name: Create KinD Cluster
      working-directory: ./src/knative.dev/${{ github.event.repository.name }}
      run: |
        set -x

        # KinD configuration.
        cat > kind.yaml <<EOF
        apiVersion: kind.x-k8s.io/v1alpha4
        kind: Cluster

        # This is needed in order to support projected volumes with service account tokens.
        # See: https://kubernetes.slack.com/archives/CEKK1KTN2/p1600268272383600
        kubeadmConfigPatches:
          - |
            apiVersion: kubeadm.k8s.io/v1beta2
            kind: ClusterConfiguration
            metadata:
              name: config
            apiServer:
              extraArgs:
                "service-account-issuer": "kubernetes.default.svc"
                "service-account-signing-key-file": "/etc/kubernetes/pki/sa.key"
        nodes:
        - role: control-plane
          image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}
        - role: worker
          image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}

        EOF

        # Create a cluster!
        kind create cluster --config kind.yaml

    - name: Install rabbitmq/cluster-operator
      run: |
        set -x

        kubectl apply -f https://github.com/rabbitmq/cluster-operator/releases/download/${{ matrix.rabbitmq-operator-version }}/cluster-operator.yml

    - name: Install Knative Eventing
      working-directory: ./src/knative.dev/${{ github.event.repository.name }}
      run: |
        set -x

        kubectl apply --filename ./third_party/eventing-latest/eventing-crds.yaml
        sleep 2 # Wait for the CRDs to be reconciled.
        kubectl apply --filename ./third_party/eventing-latest/eventing-core.yaml

    - name: Install Broker
      working-directory: ./src/knative.dev/${{ github.event.repository.name }}
      run: |
        set -x
        # TODO: this should use the release script and then apply the newly created release yaml in the future.

        # Install Broker.
        ko apply -f ./config/brokerstandalone/

    - name: Wait for Ready
      working-directory: ./src/knative.dev/${{ github.event.repository.name }}
      run: |
        set -e
        source ./vendor/knative.dev/hack/infra-library.sh
        wait_until_pods_running ${SYSTEM_NAMESPACE}
        wait_until_pods_running ${RABBITMQ_SYSTEM_NAMESPACE}

      # Run conformance tests
    - name: Run conformance Tests
      working-directory: ./src/knative.dev/${{ github.event.repository.name }}
      run: |
        set -x

        # Get the full templates directory path.
        export BROKER_TEMPLATES=${PWD}/test/conformance/testdata/with-secret
        export BROKER_CLASS=RabbitMQBroker
        
        SYSTEM_NAMESPACE=knative-eventing go test -v -count=1  -parallel=12 -timeout=20m -tags=e2e -run TestBrokerConformance ./test/conformance/...

    - name: Gather Failure Data
      if: ${{ failure() }}
      run: |
        set -x

        echo "===================== Brokers =============================="
        kubectl get broker --all-namespaces=true -oyaml

        echo "===================== Triggers ============================="
        kubectl get trigger --all-namespaces=true -oyaml

        echo "===================== RabbitMQClusters ====================="
        kubectl get RabbitMQCluster --all-namespaces=true -oyaml

        echo "===================== K8s Events ==========================="
        kubectl get events --all-namespaces=true -oyaml

        echo "===================== Pod Logs ============================="
        namespaces=(knative-eventing rabbitmq-system)
        for namespace in ${namespaces[@]}; do
          for pod in $(kubectl get pod -n $namespace | awk '{print $1}'); do
            for container in $(kubectl get pod "${pod}" -n $namespace -ojsonpath='{.spec.containers[*].name}'); do
              echo "Namespace, Pod, Container: ${namespace}, ${pod}, ${container}"
              kubectl logs -n $namespace "${pod}" -c "${container}" || true
              echo "----------------------------------------------------------"
              echo "Namespace, Pod, Container (Previous instance): ${namespace}, ${pod}, ${container}"
              kubectl logs -p -n $namespace "${pod}" -c "${container}" || true
              echo "============================================================"
            done
          done
        done

    - name: Post failure notice to Slack
      # Note: using env.SLACK_WEBHOOK here because secrets are not allowed in the if block.
      if: ${{ env.SLACK_WEBHOOK != '' && failure() && github.event_name != 'pull_request' }}
      uses: rtCamp/action-slack-notify@v2.1.0
      env:
        SLACK_ICON: http://github.com/knative.png?size=48
        SLACK_USERNAME: github-actions
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: 'eventing-delivery'
        MSG_MINIMAL: 'true'
        SLACK_TITLE: Periodic e2e for RabbitMQ on kind on (${{ matrix.k8s-version }} failed.
        SLACK_MESSAGE: |
          For detailed logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}


