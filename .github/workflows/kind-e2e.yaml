name: KinD e2e tests

on:
  push:
    branches: [ 'master', 'release-*' ]
  pull_request:
    branches: [ 'master', 'release-*' ]

jobs:

  ko-resolve:
    name: e2e tests
    runs-on: ubuntu-latest
    env:
      GOPATH: ${{ github.workspace }}
      GO111MODULE: off
      KO_DOCKER_REPO: kind.local

    steps:
    - name: Set up Go 1.14.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.14.x

    - name: Install Dependencies
      run: |
        GO111MODULE=on go get github.com/google/ko/cmd/ko@master

    - name: Check out code onto GOPATH
      uses: actions/checkout@v2
      with:
        path: ./src/knative.dev/${{github.event.pull_request.head.repo.name}}

    - name: Install KinD
      working-directory: ./src/knative.dev/${{github.event.pull_request.head.repo.name}}
      env:
        KIND_VERSION: v0.8.1
      run: |
        set -x

        curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
        chmod +x ./kind
        sudo mv kind /usr/local/bin

    - name: Create KinD Cluster
      working-directory: ./src/knative.dev/${{github.event.pull_request.head.repo.name}}
      run: |
        set -x

        # KinD configuration.
        cat > kind.yaml <<EOF
        apiVersion: kind.x-k8s.io/v1alpha4
        kind: Cluster
        nodes:
        - role: control-plane
        - role: worker
        EOF

        # Create a cluster!
        kind create cluster --config kind.yaml

    - name: Fetch rabbitmq/cluster-operator
      uses: actions/checkout@v2
      with:
        repository: rabbitmq/cluster-operator
        path: ./src/github.com/rabbitmq/cluster-operator

    - name: Install rabbitmq/cluster-operator
      working-directory: ./src/github.com/rabbitmq/cluster-operator
      run: |
        set -x

        kubectl apply -f config/namespace/base/namespace.yaml
        kubectl apply -f config/crd/bases/rabbitmq.com_rabbitmqclusters.yaml
        sleep 2 # Wait for the CRDs to be reconciled.
        kubectl -n rabbitmq-system apply --kustomize config/rbac/
        kubectl -n rabbitmq-system apply --kustomize config/manager/

    - name: Fetch kedacore/keda
      uses: actions/checkout@v2
      with:
        repository: kedacore/keda
        path: ./src/github.com/kedacore/keda
        ref: v1.5.0

    - name: Install kedacore/keda
      working-directory: ./src/github.com/kedacore/keda
      run: |
        set -x

        kubectl apply -f deploy/crds/keda.k8s.io_scaledobjects_crd.yaml
        kubectl apply -f deploy/crds/keda.k8s.io_triggerauthentications_crd.yaml
        sleep 2 # Wait for the CRDs to be reconciled.
        kubectl apply -f deploy/

    - name: Install Knative Eventing
      working-directory: ./src/github.com/rabbitmq/cluster-operator
      run: |
        set -x

        kubectl apply --filename https://github.com/knative/eventing/releases/download/v0.17.0/eventing-crds.yaml
        sleep 2 # Wait for the CRDs to be reconciled.
        kubectl apply --filename https://github.com/knative/eventing/releases/download/v0.17.0/eventing-core.yaml

# todo: skip the quacken at the moment.
#  - name: Release the Quacken
#      working-directory: ./src/knative.dev/${{github.event.pull_request.head.repo.name}}
#      run: |
#        set -x
#
#        # ko apply -Pf test/config/ -f config

    - name: Wait for Ready
      working-directory: ./src/knative.dev/${{github.event.pull_request.head.repo.name}}
      run: |
        set -x

        # Probably don't need this anymore, but keep until we
        # have something that waits for pods to becomes ready.
        sleep 60

        # For debugging.
        kubectl get pods --all-namespaces

    - name: Run e2e Tests
      working-directory: ./src/knative.dev/${{github.event.pull_request.head.repo.name}}
      run: |
        set -x

        # For logstream to work.
        export SYSTEM_NAMESPACE=knative-eventing # TODO: fix this when we move the namespace.

        # Run the tests tagged as e2e on the KinD cluster.
        go test -v -race -count=1 -timeout=15m -tags=e2e ./test/e2e/...

    - name: Gather Failure Data
      if: ${{ failure() }}
      run: |
        set -x

        echo "===================== Brokers =============================="
        kubectl get broker --all-namespaces=true -oyaml

        echo "===================== Triggers ============================="
        kubectl get trigger --all-namespaces=true -oyaml

        echo "===================== RabbitMQClusters ====================="
        kubectl get RabbitMQCluster --all-namespaces=true -oyaml

        echo "===================== K8s Events ==========================="
        kubectl get events --all-namespaces=true -oyaml

        echo "===================== Pod Logs ============================="
        local namespace=knative-eventing
        for pod in $(kubectl get pod -n $namespace | grep Running | awk '{print $1}'); do
          for container in $(kubectl get pod "${pod}" -n $namespace -ojsonpath='{.spec.containers[*].name}'); do
            echo "Namespace, Pod, Container: ${namespace}, ${pod}, ${container}"
            kubectl logs -n $namespace "${pod}" -c "${container}" || true
            echo "----------------------------------------------------------"
            echo "Namespace, Pod, Container (Previous instance): ${namespace}, ${pod}, ${container}"
            kubectl logs -p -n $namespace "${pod}" -c "${container}" || true
            echo "============================================================"
          done
        done


