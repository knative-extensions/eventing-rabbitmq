name: KinD e2e tests

on:
  push:
    branches: [ 'master', 'release-*' ]
  pull_request:
    branches: [ 'master', 'release-*' ]

jobs:

  ko-resolve:
    name: e2e tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Keep running if one leg fails.
      matrix:
        k8s-version:
        - v1.17.11
        - v1.18.8
        - v1.19.1

        rabbitmq-operator-version:
        - v1.0.0
        - v1.1.0
        - v1.2.0
        - v1.3.0
        - v1.4.0

        # Map between K8s and KinD versions.
        # This is attempting to make it a bit clearer what's being tested.
        # See: https://github.com/kubernetes-sigs/kind/releases/tag/v0.9.0
        include:
        - k8s-version: v1.17.11
          kind-version: v0.9.0
          kind-image-sha: sha256:5240a7a2c34bf241afb54ac05669f8a46661912eab05705d660971eeb12f6555
        - k8s-version: v1.18.8
          kind-version: v0.9.0
          kind-image-sha: sha256:f4bcc97a0ad6e7abaf3f643d890add7efe6ee4ab90baeb374b4f41a4c95567eb
        - k8s-version: v1.19.1
          kind-version: v0.9.0
          kind-image-sha: sha256:98cf5288864662e37115e362b23e4369c8c4a408f99cbc06e58ac30ddc721600
    env:
      GOPATH: ${{ github.workspace }}
      SYSTEM_NAMESPACE: knative-eventing
      # Where the Rabbitmq cluster operator is installed.
      RABBITMQ_SYSTEM_NAMESPACE: rabbitmq-system
      KO_DOCKER_REPO: kind.local

    steps:
    - name: Set up Go 1.14.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.14.x

    - name: Install Dependencies
      run: |
        curl -L https://github.com/google/ko/releases/download/v0.7.0/ko_0.7.0_Linux_x86_64.tar.gz | tar xzf - ko
        chmod +x ./ko
        sudo mv ko /usr/local/bin

    - name: Check out code onto GOPATH
      uses: actions/checkout@v2
      with:
        path: ./src/knative.dev/${{ github.event.repository.name }}

    - name: Install KinD
      working-directory: ./src/knative.dev/${{ github.event.repository.name }}
      env:
        KIND_VERSION: ${{ matrix.kind-version }}
      run: |
        set -x

        curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${{ matrix.kind-version }}/kind-$(uname)-amd64
        chmod +x ./kind
        sudo mv kind /usr/local/bin

    - name: Create KinD Cluster
      working-directory: ./src/knative.dev/${{ github.event.repository.name }}
      run: |
        set -x

        # KinD configuration.
        cat > kind.yaml <<EOF
        apiVersion: kind.x-k8s.io/v1alpha4
        kind: Cluster

        # This is needed in order to support projected volumes with service account tokens.
        # See: https://kubernetes.slack.com/archives/CEKK1KTN2/p1600268272383600
        kubeadmConfigPatches:
          - |
            apiVersion: kubeadm.k8s.io/v1beta2
            kind: ClusterConfiguration
            metadata:
              name: config
            apiServer:
              extraArgs:
                "service-account-issuer": "kubernetes.default.svc"
                "service-account-signing-key-file": "/etc/kubernetes/pki/sa.key"
        nodes:
        - role: control-plane
          image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}
        - role: worker
          image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}

        EOF

        # Create a cluster!
        kind create cluster --config kind.yaml

    - name: Install rabbitmq/cluster-operator
      run: |
        set -x

        kubectl apply -f https://github.com/rabbitmq/cluster-operator/releases/download/${{ matrix.rabbitmq-operator-version }}/cluster-operator.yml

    - name: Install Knative Eventing
      run: |
        set -x

        kubectl apply --filename https://github.com/knative/eventing/releases/download/v0.18.4/eventing-crds.yaml
        sleep 2 # Wait for the CRDs to be reconciled.
        kubectl apply --filename https://github.com/knative/eventing/releases/download/v0.18.4/eventing-core.yaml

    - name: Install
      working-directory: ./src/knative.dev/${{ github.event.repository.name }}
      run: |
        set -x
        # TODO: this should use the release script and then apply the newly created release yaml in the future.

        # Install Broker.
        ko apply -f ./config/broker/

# todo: skip the quacken at the moment.
#  - name: Release the Quacken
#      working-directory: ./src/knative.dev/${{ github.event.repository.name }}
#      run: |
#        set -x
#
#        # ko apply -Pf test/config/ -f config

    - name: Wait for Ready
      working-directory: ./src/knative.dev/${{ github.event.repository.name }}
      run: |
        set -e
        source ./vendor/knative.dev/hack/infra-library.sh
        wait_until_pods_running ${SYSTEM_NAMESPACE}
        wait_until_pods_running ${RABBITMQ_SYSTEM_NAMESPACE}

    - name: Run e2e Tests
      working-directory: ./src/knative.dev/${{ github.event.repository.name }}
      run: |
        set -x

        # Run the tests tagged as e2e on the KinD cluster.
        go test -v -race -count=1 -timeout=15m -tags=e2e ./test/e2e/...

    - name: Gather Failure Data
      if: ${{ failure() }}
      run: |
        set -x

        echo "===================== Brokers =============================="
        kubectl get broker --all-namespaces=true -oyaml

        echo "===================== Triggers ============================="
        kubectl get trigger --all-namespaces=true -oyaml

        echo "===================== RabbitMQClusters ====================="
        kubectl get RabbitMQCluster --all-namespaces=true -oyaml

        echo "===================== K8s Events ==========================="
        kubectl get events --all-namespaces=true -oyaml

        echo "===================== Pod Logs ============================="
        namespace=knative-eventing
        for pod in $(kubectl get pod -n $namespace | awk '{print $1}'); do
          for container in $(kubectl get pod "${pod}" -n $namespace -ojsonpath='{.spec.containers[*].name}'); do
            echo "Namespace, Pod, Container: ${namespace}, ${pod}, ${container}"
            kubectl logs -n $namespace "${pod}" -c "${container}" || true
            echo "----------------------------------------------------------"
            echo "Namespace, Pod, Container (Previous instance): ${namespace}, ${pod}, ${container}"
            kubectl logs -p -n $namespace "${pod}" -c "${container}" || true
            echo "============================================================"
          done
        done


