---

apiVersion: v1
kind: Namespace
metadata:
  name: perf-eventing

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: config-mako
  namespace: perf-eventing
data:
  dev.config: |
    # Create this benchmark with the mako tool: mako create_benchmark dev.config
    # Update this benchmark with the mako tool: mako update_benchmark dev.config
    # Learn more about the mako tool at
    # https://github.com/google/mako/blob/master/docs/CLI.md.

    project_name: "Knative"
    benchmark_name: "Development - IMC Broker Latency & Throughput"
    description: "Measure latency and throughput of the broker using various channels."
    benchmark_key: '6552586517741568'

    # Human owners for manual benchmark adjustments.
    owner_list: "ikhaprov@vmware.com"
    owner_list: "glazu@vmware.com"
    owner_list: "benm@vmware.com"
    owner_list: "gfreites@vmware.com"
    # Only this robot should publish data to Mako for this key!
    owner_list: "mako-job@knative-eventing-performance.iam.gserviceaccount.com"
    # Define the name and type for x-axis of run charts
    input_value_info: {
      value_key: "t"
      label: "time"
      type: TIMESTAMP
    }
    # Note: value_key is stored repeatedly and should be very short (ideally one or two characters).
    metric_info_list: {
      value_key: "pl"
      label: "publish-latency"
    }
    metric_info_list: {
      value_key: "pe"
      label: "publish-errors"
    }
    metric_info_list: {
      value_key: "st"
      label: "send-throughput"
    }
    metric_info_list: {
      value_key: "dl"
      label: "deliver-latency"
    }
    metric_info_list: {
      value_key: "de"
      label: "deliver-errors"
    }
    metric_info_list: {
      value_key: "dt"
      label: "deliver-throughput"
    }
    metric_info_list: {
      value_key: "pet"
      label: "publish-failure-throughput"
    }
    metric_info_list: {
      value_key: "det"
      label: "deliver-failure-throughput"
    }

---

apiVersion: rabbitmq.com/v1beta1
kind: RabbitmqCluster
metadata:
  name: rabbitmq-test-cluster
  namespace: perf-eventing
spec:
  replicas: 1
  # To tie the test env to a certain type of node VM use this
  # affinity:
  #  nodeAffinity:
  #    requiredDuringSchedulingIgnoredDuringExecution:
  #      nodeSelectorTerms:
  #      - matchExpressions:
  #        - key: cloud.google.com/machine-family
  #          operator: In
  #          values:
  #          - c2

---

apiVersion: eventing.knative.dev/v1
kind: Broker
metadata:
  name: rabbitmq-test-broker
  namespace: perf-eventing
  annotations:
    eventing.knative.dev/broker.class: RabbitMQBroker
spec:
  config:
    apiVersion: rabbitmq.com/v1beta1
    kind: RabbitmqCluster
    name: rabbitmq-test-cluster

---

apiVersion: eventing.knative.dev/v1
kind: Trigger
metadata:
  name: rabbitmq-trigger-perf
  namespace: perf-eventing
  annotations:
    # Set this to 1 for FIFO
    rabbitmq.eventing.knative.dev/prefetchCount: "100"
spec:
  broker: rabbitmq-test-broker
  subscriber:
    ref:
      apiVersion: v1
      kind: Service
      name: rabbitmq-broker-perf-consumer

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: eventing-broker-ingress
  namespace: perf-eventing

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: eventing-broker-filter
  namespace: perf-eventing

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: perf-eventing
  namespace: perf-eventing

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: perf-eventing
rules:
  - apiGroups: [""]
    resources: ["nodes", "pods"]
    verbs: ["list"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: perf-eventing
subjects:
  - kind: ServiceAccount
    name: perf-eventing
    namespace: perf-eventing
roleRef:
  kind: ClusterRole
  name: perf-eventing
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: eventing-broker-ingress
  namespace: perf-eventing
subjects:
  - kind: ServiceAccount
    name: eventing-broker-ingress
    namespace: perf-eventing
roleRef:
  kind: ClusterRole
  name: eventing-broker-ingress
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: eventing-broker-filter
  namespace: perf-eventing
subjects:
  - kind: ServiceAccount
    name: eventing-broker-filter
    namespace: perf-eventing
roleRef:
  kind: ClusterRole
  name: eventing-broker-filter
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-broker-perf-consumer
  namespace: perf-eventing
spec:
  selector:
    role: rabbitmq-broker-perf-consumer
  ports:
  - name: http
    port: 80
    targetPort: cloudevents
    protocol: TCP

---

apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-broker-perf-aggregator
  namespace: perf-eventing
spec:
  selector:
    role: rabbitmq-broker-perf-aggregator
  ports:
  - name: grpc
    port: 10000
    targetPort: grpc
    protocol: TCP
