/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1beta1 "knative.dev/eventing-rabbitmq/pkg/apis/messaging/v1beta1"
)

// RabbitmqChannelLister helps list RabbitmqChannels.
type RabbitmqChannelLister interface {
	// List lists all RabbitmqChannels in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.RabbitmqChannel, err error)
	// RabbitmqChannels returns an object that can list and get RabbitmqChannels.
	RabbitmqChannels(namespace string) RabbitmqChannelNamespaceLister
	RabbitmqChannelListerExpansion
}

// rabbitmqChannelLister implements the RabbitmqChannelLister interface.
type rabbitmqChannelLister struct {
	indexer cache.Indexer
}

// NewRabbitmqChannelLister returns a new RabbitmqChannelLister.
func NewRabbitmqChannelLister(indexer cache.Indexer) RabbitmqChannelLister {
	return &rabbitmqChannelLister{indexer: indexer}
}

// List lists all RabbitmqChannels in the indexer.
func (s *rabbitmqChannelLister) List(selector labels.Selector) (ret []*v1beta1.RabbitmqChannel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.RabbitmqChannel))
	})
	return ret, err
}

// RabbitmqChannels returns an object that can list and get RabbitmqChannels.
func (s *rabbitmqChannelLister) RabbitmqChannels(namespace string) RabbitmqChannelNamespaceLister {
	return rabbitmqChannelNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RabbitmqChannelNamespaceLister helps list and get RabbitmqChannels.
type RabbitmqChannelNamespaceLister interface {
	// List lists all RabbitmqChannels in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.RabbitmqChannel, err error)
	// Get retrieves the RabbitmqChannel from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.RabbitmqChannel, error)
	RabbitmqChannelNamespaceListerExpansion
}

// rabbitmqChannelNamespaceLister implements the RabbitmqChannelNamespaceLister
// interface.
type rabbitmqChannelNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RabbitmqChannels in the indexer for a given namespace.
func (s rabbitmqChannelNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.RabbitmqChannel, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.RabbitmqChannel))
	})
	return ret, err
}

// Get retrieves the RabbitmqChannel from the indexer for a given namespace and name.
func (s rabbitmqChannelNamespaceLister) Get(name string) (*v1beta1.RabbitmqChannel, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("rabbitmqchannel"), name)
	}
	return obj.(*v1beta1.RabbitmqChannel), nil
}
